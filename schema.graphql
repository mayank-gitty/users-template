# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  company: Company
  createdAt: DateTime
  address: String
  phone: String
  role: String
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  company: CompanyWhereInput
  createdAt: DateTimeNullableFilter
  address: StringFilter
  phone: StringFilter
  role: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  company: CompanyRelateToOneForUpdateInput
  createdAt: DateTime
  address: String
  phone: String
  role: String
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  company: CompanyRelateToOneForCreateInput
  createdAt: DateTime
  address: String
  phone: String
  role: String
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

type ProfileUser {
  id: ID!
  user: User
  photograph: String
  resume: String
  resume_headline: String
  itskills(where: ItSkillWhereInput! = {}, orderBy: [ItSkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ItSkillWhereUniqueInput): [ItSkill!]
  itskillsCount(where: ItSkillWhereInput! = {}): Int
  education(where: AddEducationWhereInput! = {}, orderBy: [AddEducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddEducationWhereUniqueInput): [AddEducation!]
  educationCount(where: AddEducationWhereInput! = {}): Int
  project(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectCount(where: ProjectWhereInput! = {}): Int
  active: Boolean
  open_to_work: Boolean
  keyskills(where: KeySkillWhereInput! = {}, orderBy: [KeySkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeySkillWhereUniqueInput): [KeySkill!]
  keyskillsCount(where: KeySkillWhereInput! = {}): Int
  experience(where: AddExperienceWhereInput! = {}, orderBy: [AddExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddExperienceWhereUniqueInput): [AddExperience!]
  experienceCount(where: AddExperienceWhereInput! = {}): Int
  profile_summary: String
  createdAt: DateTime
}

input ProfileUserWhereUniqueInput {
  id: ID
}

input ProfileUserWhereInput {
  AND: [ProfileUserWhereInput!]
  OR: [ProfileUserWhereInput!]
  NOT: [ProfileUserWhereInput!]
  id: IDFilter
  user: UserWhereInput
  photograph: StringFilter
  resume: StringFilter
  resume_headline: StringFilter
  itskills: ItSkillManyRelationFilter
  education: AddEducationManyRelationFilter
  project: ProjectManyRelationFilter
  active: BooleanFilter
  open_to_work: BooleanFilter
  keyskills: KeySkillManyRelationFilter
  experience: AddExperienceManyRelationFilter
  profile_summary: StringFilter
  createdAt: DateTimeNullableFilter
}

input ItSkillManyRelationFilter {
  every: ItSkillWhereInput
  some: ItSkillWhereInput
  none: ItSkillWhereInput
}

input AddEducationManyRelationFilter {
  every: AddEducationWhereInput
  some: AddEducationWhereInput
  none: AddEducationWhereInput
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input KeySkillManyRelationFilter {
  every: KeySkillWhereInput
  some: KeySkillWhereInput
  none: KeySkillWhereInput
}

input AddExperienceManyRelationFilter {
  every: AddExperienceWhereInput
  some: AddExperienceWhereInput
  none: AddExperienceWhereInput
}

input ProfileUserOrderByInput {
  id: OrderDirection
  photograph: OrderDirection
  resume: OrderDirection
  resume_headline: OrderDirection
  active: OrderDirection
  open_to_work: OrderDirection
  profile_summary: OrderDirection
  createdAt: OrderDirection
}

input ProfileUserUpdateInput {
  user: UserRelateToOneForUpdateInput
  photograph: String
  resume: String
  resume_headline: String
  itskills: ItSkillRelateToManyForUpdateInput
  education: AddEducationRelateToManyForUpdateInput
  project: ProjectRelateToManyForUpdateInput
  active: Boolean
  open_to_work: Boolean
  keyskills: KeySkillRelateToManyForUpdateInput
  experience: AddExperienceRelateToManyForUpdateInput
  profile_summary: String
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ItSkillRelateToManyForUpdateInput {
  disconnect: [ItSkillWhereUniqueInput!]
  set: [ItSkillWhereUniqueInput!]
  create: [ItSkillCreateInput!]
  connect: [ItSkillWhereUniqueInput!]
}

input AddEducationRelateToManyForUpdateInput {
  disconnect: [AddEducationWhereUniqueInput!]
  set: [AddEducationWhereUniqueInput!]
  create: [AddEducationCreateInput!]
  connect: [AddEducationWhereUniqueInput!]
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input KeySkillRelateToManyForUpdateInput {
  disconnect: [KeySkillWhereUniqueInput!]
  set: [KeySkillWhereUniqueInput!]
  create: [KeySkillCreateInput!]
  connect: [KeySkillWhereUniqueInput!]
}

input AddExperienceRelateToManyForUpdateInput {
  disconnect: [AddExperienceWhereUniqueInput!]
  set: [AddExperienceWhereUniqueInput!]
  create: [AddExperienceCreateInput!]
  connect: [AddExperienceWhereUniqueInput!]
}

input ProfileUserUpdateArgs {
  where: ProfileUserWhereUniqueInput!
  data: ProfileUserUpdateInput!
}

input ProfileUserCreateInput {
  user: UserRelateToOneForCreateInput
  photograph: String
  resume: String
  resume_headline: String
  itskills: ItSkillRelateToManyForCreateInput
  education: AddEducationRelateToManyForCreateInput
  project: ProjectRelateToManyForCreateInput
  active: Boolean
  open_to_work: Boolean
  keyskills: KeySkillRelateToManyForCreateInput
  experience: AddExperienceRelateToManyForCreateInput
  profile_summary: String
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ItSkillRelateToManyForCreateInput {
  create: [ItSkillCreateInput!]
  connect: [ItSkillWhereUniqueInput!]
}

input AddEducationRelateToManyForCreateInput {
  create: [AddEducationCreateInput!]
  connect: [AddEducationWhereUniqueInput!]
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input KeySkillRelateToManyForCreateInput {
  create: [KeySkillCreateInput!]
  connect: [KeySkillWhereUniqueInput!]
}

input AddExperienceRelateToManyForCreateInput {
  create: [AddExperienceCreateInput!]
  connect: [AddExperienceWhereUniqueInput!]
}

type Education {
  id: ID!
  education(where: AddEducationWhereInput! = {}, orderBy: [AddEducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddEducationWhereUniqueInput): [AddEducation!]
  educationCount(where: AddEducationWhereInput! = {}): Int
  university: String
  course: String
  specialization: String
  courseDuration: String
  gradingSystem: String
  marks: String
  add_doctorate_phd: String
  add_masters_post_gradiation: String
  add_graduation_diploma: String
  add_class_X11: String
  add_class_X: String
  add_below_10th: String
}

input EducationWhereUniqueInput {
  id: ID
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  id: IDFilter
  education: AddEducationManyRelationFilter
  university: StringFilter
  course: StringFilter
  specialization: StringFilter
  courseDuration: StringFilter
  gradingSystem: StringFilter
  marks: StringFilter
  add_doctorate_phd: StringFilter
  add_masters_post_gradiation: StringFilter
  add_graduation_diploma: StringFilter
  add_class_X11: StringFilter
  add_class_X: StringFilter
  add_below_10th: StringFilter
}

input EducationOrderByInput {
  id: OrderDirection
  university: OrderDirection
  course: OrderDirection
  specialization: OrderDirection
  courseDuration: OrderDirection
  gradingSystem: OrderDirection
  marks: OrderDirection
  add_doctorate_phd: OrderDirection
  add_masters_post_gradiation: OrderDirection
  add_graduation_diploma: OrderDirection
  add_class_X11: OrderDirection
  add_class_X: OrderDirection
  add_below_10th: OrderDirection
}

input EducationUpdateInput {
  education: AddEducationRelateToManyForUpdateInput
  university: String
  course: String
  specialization: String
  courseDuration: String
  gradingSystem: String
  marks: String
  add_doctorate_phd: String
  add_masters_post_gradiation: String
  add_graduation_diploma: String
  add_class_X11: String
  add_class_X: String
  add_below_10th: String
}

input EducationUpdateArgs {
  where: EducationWhereUniqueInput!
  data: EducationUpdateInput!
}

input EducationCreateInput {
  education: AddEducationRelateToManyForCreateInput
  university: String
  course: String
  specialization: String
  courseDuration: String
  gradingSystem: String
  marks: String
  add_doctorate_phd: String
  add_masters_post_gradiation: String
  add_graduation_diploma: String
  add_class_X11: String
  add_class_X: String
  add_below_10th: String
}

type ItSkill {
  id: ID!
  name: String
  masterId: String
  version: String
  lastUsed: String
  experience: String
}

input ItSkillWhereUniqueInput {
  id: ID
}

input ItSkillWhereInput {
  AND: [ItSkillWhereInput!]
  OR: [ItSkillWhereInput!]
  NOT: [ItSkillWhereInput!]
  id: IDFilter
  name: StringFilter
  masterId: StringFilter
  version: StringFilter
  lastUsed: StringFilter
  experience: StringFilter
}

input ItSkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
  masterId: OrderDirection
  version: OrderDirection
  lastUsed: OrderDirection
  experience: OrderDirection
}

input ItSkillUpdateInput {
  name: String
  masterId: String
  version: String
  lastUsed: String
  experience: String
}

input ItSkillUpdateArgs {
  where: ItSkillWhereUniqueInput!
  data: ItSkillUpdateInput!
}

input ItSkillCreateInput {
  name: String
  masterId: String
  version: String
  lastUsed: String
  experience: String
}

type KeySkill {
  id: ID!
  name: String
  version: String
  lastUsed: String
  master: Boolean
  experience: String
}

input KeySkillWhereUniqueInput {
  id: ID
}

input KeySkillWhereInput {
  AND: [KeySkillWhereInput!]
  OR: [KeySkillWhereInput!]
  NOT: [KeySkillWhereInput!]
  id: IDFilter
  name: StringFilter
  version: StringFilter
  lastUsed: StringFilter
  master: BooleanFilter
  experience: StringFilter
}

input KeySkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
  version: OrderDirection
  lastUsed: OrderDirection
  master: OrderDirection
  experience: OrderDirection
}

input KeySkillUpdateInput {
  name: String
  version: String
  lastUsed: String
  master: Boolean
  experience: String
}

input KeySkillUpdateArgs {
  where: KeySkillWhereUniqueInput!
  data: KeySkillUpdateInput!
}

input KeySkillCreateInput {
  name: String
  version: String
  lastUsed: String
  master: Boolean
  experience: String
}

type Project {
  id: ID!
  projectTitle: String
  client: String
  workFromYear: String
  workFromMonth: String
  projectStatus: String
  detailsOfProject: String
  projectSite: String
  projectLocation: String
  natureOfEmployment: String
  teamSize: String
  role: String
  roleDescription: String
  skillUsed: String
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  projectTitle: StringFilter
  client: StringFilter
  workFromYear: StringFilter
  workFromMonth: StringFilter
  projectStatus: StringNullableFilter
  detailsOfProject: StringFilter
  projectSite: StringNullableFilter
  projectLocation: StringFilter
  natureOfEmployment: StringNullableFilter
  teamSize: StringFilter
  role: StringFilter
  roleDescription: StringFilter
  skillUsed: StringFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  projectTitle: OrderDirection
  client: OrderDirection
  workFromYear: OrderDirection
  workFromMonth: OrderDirection
  projectStatus: OrderDirection
  detailsOfProject: OrderDirection
  projectSite: OrderDirection
  projectLocation: OrderDirection
  natureOfEmployment: OrderDirection
  teamSize: OrderDirection
  role: OrderDirection
  roleDescription: OrderDirection
  skillUsed: OrderDirection
}

input ProjectUpdateInput {
  projectTitle: String
  client: String
  workFromYear: String
  workFromMonth: String
  projectStatus: String
  detailsOfProject: String
  projectSite: String
  projectLocation: String
  natureOfEmployment: String
  teamSize: String
  role: String
  roleDescription: String
  skillUsed: String
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  projectTitle: String
  client: String
  workFromYear: String
  workFromMonth: String
  projectStatus: String
  detailsOfProject: String
  projectSite: String
  projectLocation: String
  natureOfEmployment: String
  teamSize: String
  role: String
  roleDescription: String
  skillUsed: String
}

type Company {
  id: ID!
  name: String
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CompanyUpdateInput {
  name: String
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
}

type AddEducation {
  id: ID!
  school: String
  degree: String
  field_of_study: String
  grade: String
  activities: String
  description: String
  start_year: String
  start_year_month: String
  end_year: String
  end_year_month: String
}

input AddEducationWhereUniqueInput {
  id: ID
}

input AddEducationWhereInput {
  AND: [AddEducationWhereInput!]
  OR: [AddEducationWhereInput!]
  NOT: [AddEducationWhereInput!]
  id: IDFilter
  school: StringFilter
  degree: StringFilter
  field_of_study: StringFilter
  grade: StringFilter
  activities: StringFilter
  description: StringFilter
  start_year: StringNullableFilter
  start_year_month: StringNullableFilter
  end_year: StringNullableFilter
  end_year_month: StringNullableFilter
}

input AddEducationOrderByInput {
  id: OrderDirection
  school: OrderDirection
  degree: OrderDirection
  field_of_study: OrderDirection
  grade: OrderDirection
  activities: OrderDirection
  description: OrderDirection
  start_year: OrderDirection
  start_year_month: OrderDirection
  end_year: OrderDirection
  end_year_month: OrderDirection
}

input AddEducationUpdateInput {
  school: String
  degree: String
  field_of_study: String
  grade: String
  activities: String
  description: String
  start_year: String
  start_year_month: String
  end_year: String
  end_year_month: String
}

input AddEducationUpdateArgs {
  where: AddEducationWhereUniqueInput!
  data: AddEducationUpdateInput!
}

input AddEducationCreateInput {
  school: String
  degree: String
  field_of_study: String
  grade: String
  activities: String
  description: String
  start_year: String
  start_year_month: String
  end_year: String
  end_year_month: String
}

type AddExperience {
  id: ID!
  title: String
  employment_type: String
  company: String
  location: String
  location_type: String
  currently_working: Boolean
  start_year: String
  start_year_month: String
  end_year: String
  end_year_month: String
}

input AddExperienceWhereUniqueInput {
  id: ID
}

input AddExperienceWhereInput {
  AND: [AddExperienceWhereInput!]
  OR: [AddExperienceWhereInput!]
  NOT: [AddExperienceWhereInput!]
  id: IDFilter
  title: StringFilter
  employment_type: StringNullableFilter
  company: StringFilter
  location: StringFilter
  location_type: StringNullableFilter
  currently_working: BooleanFilter
  start_year: StringNullableFilter
  start_year_month: StringNullableFilter
  end_year: StringNullableFilter
  end_year_month: StringNullableFilter
}

input AddExperienceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  employment_type: OrderDirection
  company: OrderDirection
  location: OrderDirection
  location_type: OrderDirection
  currently_working: OrderDirection
  start_year: OrderDirection
  start_year_month: OrderDirection
  end_year: OrderDirection
  end_year_month: OrderDirection
}

input AddExperienceUpdateInput {
  title: String
  employment_type: String
  company: String
  location: String
  location_type: String
  currently_working: Boolean
  start_year: String
  start_year_month: String
  end_year: String
  end_year_month: String
}

input AddExperienceUpdateArgs {
  where: AddExperienceWhereUniqueInput!
  data: AddExperienceUpdateInput!
}

input AddExperienceCreateInput {
  title: String
  employment_type: String
  company: String
  location: String
  location_type: String
  currently_working: Boolean
  start_year: String
  start_year_month: String
  end_year: String
  end_year_month: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProfileUser(data: ProfileUserCreateInput!): ProfileUser
  createProfileUsers(data: [ProfileUserCreateInput!]!): [ProfileUser]
  updateProfileUser(where: ProfileUserWhereUniqueInput!, data: ProfileUserUpdateInput!): ProfileUser
  updateProfileUsers(data: [ProfileUserUpdateArgs!]!): [ProfileUser]
  deleteProfileUser(where: ProfileUserWhereUniqueInput!): ProfileUser
  deleteProfileUsers(where: [ProfileUserWhereUniqueInput!]!): [ProfileUser]
  createEducation(data: EducationCreateInput!): Education
  createEducations(data: [EducationCreateInput!]!): [Education]
  updateEducation(where: EducationWhereUniqueInput!, data: EducationUpdateInput!): Education
  updateEducations(data: [EducationUpdateArgs!]!): [Education]
  deleteEducation(where: EducationWhereUniqueInput!): Education
  deleteEducations(where: [EducationWhereUniqueInput!]!): [Education]
  createItSkill(data: ItSkillCreateInput!): ItSkill
  createItSkills(data: [ItSkillCreateInput!]!): [ItSkill]
  updateItSkill(where: ItSkillWhereUniqueInput!, data: ItSkillUpdateInput!): ItSkill
  updateItSkills(data: [ItSkillUpdateArgs!]!): [ItSkill]
  deleteItSkill(where: ItSkillWhereUniqueInput!): ItSkill
  deleteItSkills(where: [ItSkillWhereUniqueInput!]!): [ItSkill]
  createKeySkill(data: KeySkillCreateInput!): KeySkill
  createKeySkills(data: [KeySkillCreateInput!]!): [KeySkill]
  updateKeySkill(where: KeySkillWhereUniqueInput!, data: KeySkillUpdateInput!): KeySkill
  updateKeySkills(data: [KeySkillUpdateArgs!]!): [KeySkill]
  deleteKeySkill(where: KeySkillWhereUniqueInput!): KeySkill
  deleteKeySkills(where: [KeySkillWhereUniqueInput!]!): [KeySkill]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createAddEducation(data: AddEducationCreateInput!): AddEducation
  createAddEducations(data: [AddEducationCreateInput!]!): [AddEducation]
  updateAddEducation(where: AddEducationWhereUniqueInput!, data: AddEducationUpdateInput!): AddEducation
  updateAddEducations(data: [AddEducationUpdateArgs!]!): [AddEducation]
  deleteAddEducation(where: AddEducationWhereUniqueInput!): AddEducation
  deleteAddEducations(where: [AddEducationWhereUniqueInput!]!): [AddEducation]
  createAddExperience(data: AddExperienceCreateInput!): AddExperience
  createAddExperiences(data: [AddExperienceCreateInput!]!): [AddExperience]
  updateAddExperience(where: AddExperienceWhereUniqueInput!, data: AddExperienceUpdateInput!): AddExperience
  updateAddExperiences(data: [AddExperienceUpdateArgs!]!): [AddExperience]
  deleteAddExperience(where: AddExperienceWhereUniqueInput!): AddExperience
  deleteAddExperiences(where: [AddExperienceWhereUniqueInput!]!): [AddExperience]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  profileUsers(where: ProfileUserWhereInput! = {}, orderBy: [ProfileUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProfileUserWhereUniqueInput): [ProfileUser!]
  profileUser(where: ProfileUserWhereUniqueInput!): ProfileUser
  profileUsersCount(where: ProfileUserWhereInput! = {}): Int
  educations(where: EducationWhereInput! = {}, orderBy: [EducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EducationWhereUniqueInput): [Education!]
  education(where: EducationWhereUniqueInput!): Education
  educationsCount(where: EducationWhereInput! = {}): Int
  itSkills(where: ItSkillWhereInput! = {}, orderBy: [ItSkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ItSkillWhereUniqueInput): [ItSkill!]
  itSkill(where: ItSkillWhereUniqueInput!): ItSkill
  itSkillsCount(where: ItSkillWhereInput! = {}): Int
  keySkills(where: KeySkillWhereInput! = {}, orderBy: [KeySkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeySkillWhereUniqueInput): [KeySkill!]
  keySkill(where: KeySkillWhereUniqueInput!): KeySkill
  keySkillsCount(where: KeySkillWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  addEducations(where: AddEducationWhereInput! = {}, orderBy: [AddEducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddEducationWhereUniqueInput): [AddEducation!]
  addEducation(where: AddEducationWhereUniqueInput!): AddEducation
  addEducationsCount(where: AddEducationWhereInput! = {}): Int
  addExperiences(where: AddExperienceWhereInput! = {}, orderBy: [AddExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddExperienceWhereUniqueInput): [AddExperience!]
  addExperience(where: AddExperienceWhereUniqueInput!): AddExperience
  addExperiencesCount(where: AddExperienceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
